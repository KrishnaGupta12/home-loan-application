package com.lti.homeloanapplication.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.List;
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Data
@Table(name="customer_table")
public class Customer implements Serializable {
    @Id
    @Column(name = "APP_ID")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "APP_ID_GEN")
    @SequenceGenerator(name = "APP_ID_GEN", sequenceName = "APP_ID_SEQ")
    // Applicant ID - generated by the given sequence
    private Long aapId;

    @Column(name = "first_name")
    @Size(min = 2, max = 20, message = "FIRST NAME can vary between 2 to 20 characters")
    @NotNull(message = "FIRST NAME cannot be empty")
    @Pattern(regexp = "[A-Za-z]+", message = "FIRST NAME can only be alphabets")
    // First Name - Mandatory
    private String firstName;

    @Column(name = "middle_name")
    @Pattern(regexp = "[A-Za-z]*", message = "MIDDLE NAME can only be alphabets")
    // Middle Name - Not Mandatory
    private String middleName;

    @Column(name = "last_name")
    @Size(min = 2, max = 20, message = "LAST NAME can vary between 2 to 20 characters")
    @NotNull(message = "LAST NAME cannot be empty")
    @Pattern(regexp = "[A-Za-z]+", message = "LAST NAME can only be alphabets")
    private String lastname;

    @NotNull(message = "EMAIL is mandatory")
    @Pattern(regexp = "^[A-Za-z0-9+_.-]+@(.+)$", message = "Please enter a valid email Id")
    private String email;

    @NotNull(message = "PASSWORD is mandatory")
    @Size(min = 5, max = 12, message = "Mandatory Password Length between 8-12 characters")
    private String password;

    @NotNull(message = "Confirm PASSWORD is mandatory")
    @Size(min = 5, max = 12, message = "Mandatory Password Length between 8-12 characters")
    @Transient
    private String confirmPassword;

    @Column(name = "phone_no")
    @Size(min = 10, max = 10, message = "Enter valid Phone Number")
    @Pattern(regexp = "^\\+?[0-9-]+$", message = "Phone Number can only be Numbers")
    @NotNull(message = "Phone No is mandatory")
    private String mobileNo;

    @Pattern(regexp="^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$" , message="Valid date format is 01/01/11 Or 01/01/2011")
    @NotNull(message = "DOB is mandatory")
    private String dob;

    @NotNull(message = "Please select your Gender")
    private String gender;

    @NotNull(message = "Please select your Nationality")
    @Pattern(regexp = "[A-Za-z]+", message = "Nationality can only be alphabets")
    private String nationality;

    @Column(name = "aadhar_no")
    @Size(min = 12, max = 12, message = "Length should be 12 characters")
    @NotNull(message = "Aadhar Number is Mandatory")
    @Pattern(regexp = "^\\+?[0-9-]+$", message = "Enter valid Aadhar Number")
    private String aadharNo;

    @Column(name = "pan_no")
    @Size(min = 10, max = 10, message = "Length should be 10 characters")
    @NotNull(message = "PAN Number is Mandatory")
    @Pattern(regexp = "^([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}?$", message = "Enter valid PAN Number")
    private String panNo;

    @OneToOne(mappedBy = "customer", cascade = CascadeType.ALL)
    private PropertyAndIncome propertyAndIncome;

    @OneToOne(mappedBy = "customer", cascade = CascadeType.ALL)
    private Loan loan;

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private List<Document> documentList;

}
